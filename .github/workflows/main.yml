name: CI/CD Pipeline Python

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: Build & Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo complet
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Init config Git
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Installer les requirements de chaque fonction
        run: |
          for dir in $(find . -type f -name "requirements.txt" | sed 's|/requirements.txt||'); do
            echo "Traitement du dossier $dir"
            pip install -r "$dir/requirements.txt"
          done

      - name: Installer pytest et dépendances de test
        run: |
          pip install -r test/requirements.txt
          pip install pytest

      - name: Lancer les tests avec pytest
        run: pytest test/

      - name: Installer linter (flake8)
        run: pip install flake8

      - name: Lancer linter 
        run: python -m flake8 authenticate-user/ generate-password/ generate-2fa/ --max-line-length=155

      - name: Dépendances installées
        run: echo "Installation, tests et linter terminés"

  release:
    name: Release and Notify
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout branche release
        uses: actions/checkout@v3
        with:
          ref: release
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_MSPR }}
          fetch-depth: 0

      - name: nitialize Git User
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

      - name: Pull latest changes from main
        run: git pull origin main

      - name: Update version in files on main
        if: success()
        run: |
          VERSION=$(date +"%Y.%m.%d")-$(git rev-parse --short HEAD)
          echo "Updating version to $VERSION"
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" version.json
        continue-on-error: true

      - name: Commit updated version.json on main
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN_MSPR }}
        run: |
          git checkout main || git checkout -b main origin/main
          git add version.json
          VERSION=$(date +"%Y.%m.%d")-$(git rev-parse --short HEAD)
          echo "Updating version to $VERSION"
          git commit -m "Update version to $VERSION [skip ci]"
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN_MSPR }}@github.com/${{ github.repository }} main

      - name: Checkout release branch with token
        if: success()
        uses: actions/checkout@v3
        with:
          ref: release
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_MSPR }}

      - name: Merge main into release
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN_MSPR }}
        run: |
          git fetch origin main
          git checkout -B release origin/main
          git push --force https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN_MSPR }}@github.com/${{ github.repository }} release

      - name: Send Discord notification on failure
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STEP_NAME=${{ github.job }}
          curl -X POST -H "Content-Type: application/json" -d '{
            "content": "<@&ROLE_ID> **❌ Pipeline Failure - COFRAP FONCTIONS ${{ secrets.API_NAME }}**\n\n**Repository:** ${{ github.repository }}\n**Commit SHA:** ${{ github.sha }}\n**Commit Message:** ${{ github.event.head_commit.message }}\n**Failed Step:** '"${STEP_NAME}"'"
          }' $DISCORD_WEBHOOK_URL

      - name: Send Discord release notes on success
        if: success()
        env:
          DISCORD_WEBHOOK_URL_RELEASE: ${{ secrets.DISCORD_WEBHOOK_URL_RELEASE }}
        run: |
          VERSION=$(date +"%Y.%m.%d")-$(git rev-parse --short HEAD)
          curl -X POST -H "Content-Type: application/json" -d '{
            "content": "**✅ Pipeline Successful - COFRAP FONCTIONS ${{ secrets.API_NAME }}**\n\n**Version:** '"${VERSION}"'\n**Repository:** ${{ github.repository }}\n**Commit SHA:** ${{ github.sha }}\n**Commit Message:** ${{ github.event.head_commit.message }}\n**Release Branch:** release"
          }' $DISCORD_WEBHOOK_URL_RELEASE
